generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id                String                @id(map: "User_pkey") @default(dbgenerated("auth.uid()")) @db.Uuid
    email             String?               @unique(map: "User_email_key") @db.VarChar
    name              String?
    profilePictureUrl String?
    phoneNumber       String?               @db.VarChar(50)
    createdAt         DateTime              @default(now())
    updatedAt         DateTime?             @updatedAt

    cart    Cart[]
    address Address[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Cart {
  id               String                 @id @default(dbgenerated("gen_random_uuid()"))
  quantity         Int
  deletedAt        DateTime?
  checkoutAt       DateTime?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime?              @updatedAt
  
  productVariantId String
  ProductVariant   ProductVariant         @relation(fields: [productVariantId], references: [id])

  userId           String                 @db.Uuid
  User             User                   @relation(fields: [userId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Category {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()"))
  name                 String                 @unique
  createdAt            DateTime               @default(now())
  updatedAt            DateTime?              @updatedAt

  categoriesOnProducts CategoriesOnProducts[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Inventory {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()"))
  quantity             Int
  status               InventoryStatus

  productVariantId     String
  ProductVariant       ProductVariant         @relation(fields: [productVariantId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Product {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()"))
  name                 String
  price                Int
  imageUrl             String[]
  slug                 String                 @unique
  description          String                 @default("")
  createdAt            DateTime               @default(now())
  updatedAt            DateTime?              @updatedAt

  categoriesOnProducts CategoriesOnProducts[]
  productVariant       ProductVariant[]
}

model CategoriesOnProducts {
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  productId  String
  product    Product  @relation(fields: [productId], references: [id])

  @@id([productId, categoryId])
}

model ProductVariant {
  id                String                 @id @default(dbgenerated("gen_random_uuid()"))
  sku               String
  name              String
  price             Int
  imageUrl          String
  label             String
  productId         String
  createdAt         DateTime               @default(now())
  updatedAt         DateTime?              @updatedAt
  
  cart              Cart[]
  inventory         Inventory[]
  product           Product?                @relation(fields: [productId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.

enum InventoryStatus {
  AVAILABLE
  ON_ORDER
  RESERVED
}

model Address {
    id                String                @id @default(dbgenerated("gen_random_uuid()"))
    user              User                  @relation(fields: [userId], references: [id])
    userId            String                @db.Uuid
    label             String
    detail            String
    googleMapsUrl     String
    phoneNumber       String
    recipientName     String
    createdAt         DateTime              @default(now())
    updatedAt         DateTime?             @updatedAt
}
